version: '3'
services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
      args:
         - buildno=1 (arguments only accessible build process) list or mapping
    build: . or buold: context, dockerfile
    image: api:latest <= compose names the built image
    ports:
      - "3000:3000"
    volumes:
      - .:/code
      - logvolume01:/var/log
    links:
      - mysql
      - elasticsearch
    command: [] => overide command
  mysql:
    image: mysql
  elasticsearch:
    image: elasticsearch
  volumes:
    logvolume01: {}



/ what is cache resolution/
A list of images that the engine uses for cache resolution.
build:
  context: .
  cache_from:
    - alpine:latest
    - corp/web_app:3.14
/ docker labels /
build:
  context: .
  labels:
    com.example.description: "Accounting webapp"
    com.example.department: "Finance"
    com.example.label-with-empty-value: ""


// external links
// env variables
// docker host name
//

container name can be used to resolve host name
links can be used to host name
links alias also used to create host name

cant set compose's arg to env
can set docker-file's arg to env NODE_ENV=$arg

service_name, container_name, links, can access

container is host, so two container can run on the same 3000 port.
but, cannot export same port 3000.
only one port should be exposed.
docker compose restart always
